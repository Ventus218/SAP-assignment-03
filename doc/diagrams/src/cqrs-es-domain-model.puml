@startuml cqrs-es-domain-model

hide empty members

package domain {
    !startsub ES
    interface Entity<Id> {
        id: Id
    }

    abstract class Command<TId, T extends Entity<TId>, Error, Env> {
        id: CommandId
        entityId: TId
        timestamp: Option<Long>
        {abstract} apply(entities: Map<TId, T>)(Env): Either<Error, Map<TId, T>>
        {abstract} setTimestamp(Long): Self
        {static} applyCommands<TId, T extends Entity<TId>>(commands: Iterable<Command<TId, T, ?>)(Env): Map<TId, T>: Option<T>
    }
    !endsub

    struct CommandId {
        value: String
        {static} random(): CommandId
    }
}

set separator none
package ports.cqrs {
    interface CommandSide<TId, T extends Entity<TId>, Error, Env, C extends Command<TId, T, Error, Env>> {
        publish(command: C)(using ExecutionContext): Future<Unit>
    }
    interface QuerySide<TId, T extends Entity<TId>, Error, C extends<TId, T, Error>>{
        find(id: TId, atTimestamp: Long): Option<T>
        getAll(atTimestamp: Long): Iterable<T>
        commands(atTimestamp: Long): Iterable<C>
        commandResult(id: CommandId)(Env): Either<CommandNotFound, Either<Error, Map<TId, T>>>
    }
}

package adapters.cqrs {
    class CommandSideKafkaAdapter<TId, T extends Entity<TId>, Error, Env, C extends Command<TId, T, Error>> extends CommandSide
    class QuerySideKafkaAdapter<TId, T extends Entity<TId>, Error, Env> extends QuerySide
}

domain <--- ports.cqrs

@enduml
